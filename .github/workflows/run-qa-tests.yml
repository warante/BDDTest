name: Run QA-Tests

on:
  workflow_dispatch:
    inputs:
      widget:
        description: "Widget"
        required: true
        default: selphi
        type: choice
        options:
          - selphi
          - selphid
      widgetVersion:
        description: "Widget version"
        required: true
        default: "6.8.0"
      executionEnvironment:
        description: "Execution environment"
        required: true
        default: browserStack
        type: choice
        options:
          - browserStack
          - local
      projectName:
        description: "Project name"
        required: true
        default: action
      buildName:
        description: "Build name"
        required: false
        default: testingFromAction
      testsFile:
        description: "Tests file"
        required: true
        type: choice
        options:
          - regression
          - compatibility
          - examples
      deviceType:
        description: "Device type"
        required: true
        type: choice
        default: android
        options:
          - android
          - ios
          - windows
          - macos
      env:
        description: "Environment"
        required: true
        type: choice
        default: QA
        options:
          - QA
          - IO
          - LOCALHOST
      engine:
        description: "Engine type"
        required: true
        type: choice
        default: MB
        options:
          - MB
          - FirstParty
      test:
        description: "Specific test"
        required: false

env:
  # JFrog NPM registry
  REGISTRY_URL: https://facephicorp.jfrog.io/artifactory/api/npm/npm-pro-fphi/
  BUN_AUTH_TOKEN: ${{ secrets.JFROG_NPM_TOKEN }}

  # engine licences
  LICENSE_DEV: ${{ secrets.LICENSE_DEV }}
  LICENSE_DEV_OUTDATED: ${{ secrets.LICENSE_DEV_OUTDATED }}
  LICENSE_LOCALHOST: ${{ secrets.LICENSE_LOCALHOST }}
  LICENSE_PROD: ${{ secrets.LICENSE_PROD }}

  # browserStack credentials
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
      
    steps:  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1.2.0
        with:
          registry-url: ${{ env.REGISTRY_URL }}
          scope: "@facephi"
          bun-version: 1.1.7
        env:
          BUN_AUTH_TOKEN: ${{ secrets.JFROG_NPM_TOKEN }}
 
      - name: "Install dependencies with npm"
        run: bun i

      - name: "Run tests"
        run: |          
          params=""
          params="$params -selphiVersion ${{ github.event.inputs.widgetVersion }}"
          params="$params -selphidVersion ${{ github.event.inputs.widgetVersion }}"
          params="$params -executionEnvironment ${{ github.event.inputs.executionEnvironment }}"
          params="$params -projectName ${{ github.event.inputs.widget }}_${{ github.event.inputs.testsFile }}_${{ github.event.inputs.projectName }}"
          params="$params -deviceType ${{ github.event.inputs.deviceType }}"
          params="$params -env ${{ github.event.inputs.env }}"
          params="$params -engine ${{ github.event.inputs.engine }}"
          params="$params -testsFile ${{ github.event.inputs.widget }}${{ github.event.inputs.testsFile }}"
          if [ -n "${{ github.event.inputs.buildName }}" ]; then
            params="$params -buildName ${{ github.event.inputs.buildName }}"
          fi
          
          if [ -n "${{ github.event.inputs.test }}" ]; then
            params="$params -test ${{ github.event.inputs.test }}"
          fi
          bun run cliAuto $params

